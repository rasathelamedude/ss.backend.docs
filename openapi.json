{
  "openapi": "3.0.0",
  "info": {
    "title": "Solution Squad Backend API",
    "version": "1.0.0",
    "description": "Auto-generated API documentation"
  },
  "servers": [
    {
      "url": "https://solution-squad-backend-development.onrender.com/",
      "description": "Backend Staging Server"
    },
    {
      "url": "https://solution-squad-backend-production.onrender.com/",
      "description": "Backend Production Server"
    }
  ],
  "paths": {
    "/api/admin": {
      "post": {
        "summary": "Create a new admin",
        "parameters": [
          {
            "in": "header",
            "name": "refresh-token",
            "type": "string",
            "description": "The refresh token of the super admin",
            "required": true
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "firstName",
                  "lastName",
                  "phoneNo",
                  "password",
                  "role"
                ],
                "properties": {
                  "firstName": {
                    "type": "string",
                    "description": "The first name of the created admin"
                  },
                  "lastName": {
                    "type": "string",
                    "description": "The last name of the created admin"
                  },
                  "phoneNo": {
                    "type": "string",
                    "description": "The phone number of the created admin"
                  },
                  "password": {
                    "type": "string",
                    "description": "The password of the created admin"
                  },
                  "role": {
                    "type": "string",
                    "description": "The role of the created admin which should be admin or super admin"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Admin created successfully!"
          },
          "403": {
            "description": "The admin has not super admin role!"
          },
          "404": {
            "description": "Super admin information not found!"
          },
          "409": {
            "description": "Admin already exist!"
          },
          "500": {
            "description": "Internal server error!"
          }
        }
      }
    },
    "/api/auth/signup": {
      "post": {
        "summary": "Register a new buyer account",
        "description": "Creates a new buyer account with phone number, password, and personal details. Returns access and refresh tokens upon successful registration.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "firstName",
                  "lastName",
                  "phoneNo",
                  "password",
                  "dob"
                ],
                "properties": {
                  "firstName": {
                    "type": "string",
                    "description": "The first name of the buyer",
                    "example": "Ali"
                  },
                  "lastName": {
                    "type": "string",
                    "description": "The last name of the buyer",
                    "example": "Hassan"
                  },
                  "phoneNo": {
                    "type": "string",
                    "description": "Iraqi phone number (must start with 07 and contain 11 digits)",
                    "pattern": "^07[0-9]{9}$",
                    "example": "07701234567"
                  },
                  "password": {
                    "type": "string",
                    "format": "password",
                    "description": "User's password",
                    "example": "StrongPass123!"
                  },
                  "dob": {
                    "type": "string",
                    "format": "date",
                    "description": "Date of birth (YYYY-MM-DD)",
                    "example": "2000-01-27"
                  },
                  "gender": {
                    "type": "string",
                    "enum": [
                      "male",
                      "female"
                    ],
                    "description": "Gender of the buyer",
                    "example": "male"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Buyer created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Buyer created successfuly"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "_id": {
                          "type": "string"
                        },
                        "firstName": {
                          "type": "string"
                        },
                        "lastName": {
                          "type": "string"
                        },
                        "phoneNo": {
                          "type": "string"
                        },
                        "dateOfBirth": {
                          "type": "string",
                          "format": "date"
                        },
                        "gender": {
                          "type": "string"
                        },
                        "tokens": {
                          "type": "object",
                          "properties": {
                            "accessToken": {
                              "type": "string"
                            },
                            "refreshToken": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid Iraq phone number format"
          },
          "409": {
            "description": "Phone number already exists"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/auth/login": {
      "post": {
        "summary": "Log in a buyer",
        "description": "Authenticates a buyer using their phone number and password. Returns access and refresh tokens upon successful login.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "phoneNo",
                  "password"
                ],
                "properties": {
                  "phoneNo": {
                    "type": "string",
                    "description": "Iraqi phone number (must start with 07 and contain 11 digits)",
                    "pattern": "^07[0-9]{9}$",
                    "example": "07701234567"
                  },
                  "password": {
                    "type": "string",
                    "format": "password",
                    "description": "Buyer's password",
                    "example": "StrongPass123!"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Buyer logged in successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Loged in successfuly"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "_id": {
                          "type": "string"
                        },
                        "firstName": {
                          "type": "string"
                        },
                        "lastName": {
                          "type": "string"
                        },
                        "phoneNo": {
                          "type": "string"
                        },
                        "dateOfBirth": {
                          "type": "string",
                          "format": "date"
                        },
                        "gender": {
                          "type": "string"
                        },
                        "tokens": {
                          "type": "object",
                          "properties": {
                            "accessToken": {
                              "type": "string"
                            },
                            "refreshToken": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Invalid credentials"
          },
          "404": {
            "description": "Buyer not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/auth/refresh-token": {
      "post": {
        "summary": "Refresh access token",
        "description": "Uses a valid refresh token to generate a new access token. Returns both tokens on success.",
        "parameters": [
          {
            "in": "header",
            "name": "x-refresh-token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The refresh token issued during login"
          }
        ],
        "responses": {
          "200": {
            "description": "Tokens refreshed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Tokens refreshed successfully"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "accessToken": {
                          "type": "string"
                        },
                        "refreshToken": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Invalid, expired, or mismatched refresh token"
          },
          "404": {
            "description": "No user found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/auth/change-password": {
      "post": {
        "summary": "Change buyer password",
        "description": "Allows a logged-in buyer to change their password. Requires a valid access token. Clears all existing sessions upon success.",
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Bearer access token (format: \"Bearer <token>\")"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "currentPassword",
                  "newPassword"
                ],
                "properties": {
                  "currentPassword": {
                    "type": "string",
                    "format": "password",
                    "description": "Current password of the buyer",
                    "example": "OldPass123!"
                  },
                  "newPassword": {
                    "type": "string",
                    "format": "password",
                    "description": "New password to set",
                    "example": "NewStrongPass456!"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Password changed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Password changed successfuly. Please login again."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "No token provided, invalid token, access token expired, or current password does not match"
          },
          "404": {
            "description": "No user found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/auth/delete-account": {
      "delete": {
        "summary": "Delete buyer account",
        "description": "Deletes the authenticated buyer's account. Requires a valid access token and the buyer's current password.",
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Bearer access token (format: \"Bearer <token>\")"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "password"
                ],
                "properties": {
                  "password": {
                    "type": "string",
                    "format": "password",
                    "description": "Current password of the buyer",
                    "example": "CurrentPass123!"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Account deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Account deleted successfully"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "No token provided, unauthorized, or password mismatch"
          },
          "404": {
            "description": "No user found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/auth/change-phonenumber": {
      "post": {
        "summary": "Change buyer phone number",
        "description": "Allows a logged-in buyer to change their phone number. Requires a valid access token and current password. Clears all existing sessions. New phone number must be verified.",
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Bearer access token (format: \"Bearer <token>\")"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "newPhoneNumber",
                  "password"
                ],
                "properties": {
                  "newPhoneNumber": {
                    "type": "string",
                    "description": "New Iraqi phone number (must start with 07 and contain 11 digits)",
                    "pattern": "^07[0-9]{9}$",
                    "example": "07709876543"
                  },
                  "password": {
                    "type": "string",
                    "format": "password",
                    "description": "Current password of the buyer",
                    "example": "CurrentPass123!"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Phone number changed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Phone number changed successfully. Please log in again."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid Iraq phone number format"
          },
          "401": {
            "description": "No token provided, unauthorized, or password mismatch"
          },
          "404": {
            "description": "User not found"
          },
          "409": {
            "description": "Phone number already registered"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/auth/profile": {
      "get": {
        "summary": "Get buyer profile",
        "description": "Returns the authenticated buyer's profile information. Requires a valid access token. Password is excluded from the response.",
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Bearer access token (format: \"Bearer <token>\")"
          }
        ],
        "responses": {
          "200": {
            "description": "Buyer profile retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "_id": {
                          "type": "string"
                        },
                        "firstName": {
                          "type": "string"
                        },
                        "lastName": {
                          "type": "string"
                        },
                        "phoneNo": {
                          "type": "string"
                        },
                        "dateOfBirth": {
                          "type": "string",
                          "format": "date"
                        },
                        "gender": {
                          "type": "string"
                        },
                        "isVerified": {
                          "type": "boolean"
                        },
                        "tokens": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "refreshToken": {
                                "type": "string"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "No token provided or unauthorized"
          },
          "404": {
            "description": "No user found for provided token"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/buyer/fcm-token": {
      "post": {
        "summary": "Add FCM token for a buyer",
        "description": "Adds a Firebase Cloud Messaging (FCM) token to a buyer’s account for push notifications. A buyer can only have up to 2 active tokens.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "fcmToken",
                  "buyerId"
                ],
                "properties": {
                  "fcmToken": {
                    "type": "string",
                    "description": "Firebase Cloud Messaging token",
                    "example": "fcm_example_token_123"
                  },
                  "buyerId": {
                    "type": "string",
                    "description": "ID of the buyer",
                    "example": "64f1234567890abcdef12345"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "FCM token added successfully or already exists",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "FCM token added successfully"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "fcmTokens": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Missing fcmToken or buyerId"
          },
          "404": {
            "description": "Buyer not found"
          },
          "409": {
            "description": "Maximum device limit reached (2 devices)"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "delete": {
        "summary": "Remove FCM token for a buyer",
        "description": "Removes a Firebase Cloud Messaging (FCM) token from a buyer’s account, usually when logging out from a device.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "fcmToken",
                  "buyerId"
                ],
                "properties": {
                  "fcmToken": {
                    "type": "string",
                    "description": "Firebase Cloud Messaging token to remove",
                    "example": "fcm_example_token_123"
                  },
                  "buyerId": {
                    "type": "string",
                    "description": "ID of the buyer",
                    "example": "64f1234567890abcdef12345"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "FCM token removed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "FCM token removed successfully"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Missing fcmToken or buyerId"
          },
          "404": {
            "description": "Buyer not found or FCM token not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/buyer/location": {
      "post": {
        "summary": "Add a new user location",
        "parameters": [
          {
            "in": "header",
            "name": "authorization",
            "type": "string",
            "description": "The access token of the user that starts with bearer",
            "required": true
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "locationName",
                  "longitude",
                  "latitude"
                ],
                "properties": {
                  "locationName": {
                    "type": "string",
                    "description": "The name of the location"
                  },
                  "longitude": {
                    "type": "string",
                    "description": "The longitude coordinate of the location"
                  },
                  "latitude": {
                    "type": "string",
                    "description": "The latitude coordinate of the location"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Location added successfully!"
          },
          "401": {
            "description": "Token expired!"
          },
          "403": {
            "description": "Location limit reached!"
          },
          "404": {
            "description": "Location or user information not found!"
          },
          "409": {
            "description": "Location name or coordinates already exist!"
          },
          "500": {
            "description": "Internal server error!"
          }
        }
      },
      "get": {
        "summary": "Get a specific location using locationId",
        "parameters": [
          {
            "in": "header",
            "name": "authorization",
            "type": "string",
            "description": "The access token of the user that starts with bearer",
            "required": true
          },
          {
            "in": "header",
            "name": "location-id",
            "type": "string",
            "description": "The id of the location which should be send to frontend",
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "Location sent successfully!",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Location sent successfully!"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "_id": {
                          "type": "string"
                        },
                        "locationName": {
                          "type": "string"
                        },
                        "longitude": {
                          "type": "string"
                        },
                        "latitude": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Token expired!"
          },
          "404": {
            "description": "Location or user information not found!"
          },
          "500": {
            "description": "Internal server error!"
          }
        }
      },
      "delete": {
        "summary": "Delete a specific location using locationId",
        "parameters": [
          {
            "in": "header",
            "name": "authorization",
            "type": "string",
            "description": "The access token of the user that starts with bearer",
            "required": true
          },
          {
            "in": "header",
            "name": "location-id",
            "type": "string",
            "description": "The id of the location which should be deleted",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Location deleted successfully!"
          },
          "401": {
            "description": "Token expired!"
          },
          "404": {
            "description": "Location or user information not found!"
          },
          "500": {
            "description": "Internal server error!"
          }
        }
      }
    },
    "/api/companies": {
      "get": {
        "summary": "Get all companies",
        "description": "Retrieves a list of all companies.",
        "responses": {
          "200": {
            "description": "Companies retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "count": {
                      "type": "integer",
                      "example": 5
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "_id": {
                            "type": "string"
                          },
                          "name": {
                            "type": "string"
                          },
                          "phoneNo": {
                            "type": "string"
                          },
                          "address": {
                            "type": "string"
                          },
                          "createdAt": {
                            "type": "string",
                            "format": "date-time"
                          },
                          "updatedAt": {
                            "type": "string",
                            "format": "date-time"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/companies/{id}": {
      "get": {
        "summary": "Get a company by ID",
        "description": "Retrieves a single company by its ID.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the company"
          }
        ],
        "responses": {
          "200": {
            "description": "Company retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "_id": {
                          "type": "string"
                        },
                        "name": {
                          "type": "string"
                        },
                        "phoneNo": {
                          "type": "string"
                        },
                        "address": {
                          "type": "string"
                        },
                        "createdAt": {
                          "type": "string",
                          "format": "date-time"
                        },
                        "updatedAt": {
                          "type": "string",
                          "format": "date-time"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "No company found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/companies/delete-company/{id}": {
      "delete": {
        "summary": "Delete a company by ID",
        "description": "Allows an admin to delete a company by its ID. Requires admin authorization.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the company to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "Company deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "company deleted successfully"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Company ID is required or Admin Only"
          },
          "401": {
            "description": "No token provided or unauthorized"
          },
          "404": {
            "description": "Company not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/company/{companyId}/models/": {
      "get": {
        "summary": "Get all models of a company",
        "description": "Returns a list of all models for a specific company by its ID.",
        "parameters": [
          {
            "in": "path",
            "name": "companyId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the company"
          }
        ],
        "responses": {
          "200": {
            "description": "List of models retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "companyName": {
                      "type": "string",
                      "example": "Toyota"
                    },
                    "count": {
                      "type": "integer",
                      "example": 3
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string",
                            "example": "Corolla"
                          },
                          "createdAt": {
                            "type": "string",
                            "format": "date-time",
                            "example": "2025-09-28T21:00:00.000Z"
                          },
                          "updatedAt": {
                            "type": "string",
                            "format": "date-time",
                            "example": "2025-09-28T21:00:00.000Z"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Company not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "post": {
        "summary": "Add a new model to a company",
        "description": "Creates a new model under the specified company. Model names are case-insensitive and must be unique within the company.",
        "parameters": [
          {
            "in": "path",
            "name": "companyId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the company to add the model to"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "modelName"
                ],
                "properties": {
                  "modelName": {
                    "type": "string",
                    "description": "Name of the new model to add",
                    "example": "Corolla"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Model added successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Corolla added to the company"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Missing required fields"
          },
          "404": {
            "description": "Company not found"
          },
          "409": {
            "description": "Model already exists"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/company/{companyId}/models/{modelId}": {
      "delete": {
        "summary": "Delete a model from a company",
        "description": "Deletes a specified model from the given company by ID. Returns the updated list of models.",
        "parameters": [
          {
            "in": "path",
            "name": "companyId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of the company"
          },
          {
            "in": "path",
            "name": "modelId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of the model to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "Model deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Corolla deleted from the company"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "_id": {
                            "type": "string"
                          },
                          "name": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Missing companyId or modelId"
          },
          "404": {
            "description": "Company or model not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    }
  },
  "components": {},
  "tags": []
}